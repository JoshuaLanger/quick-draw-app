{"version":3,"sources":["assets/diamond-texture.svg","themes/theme.js","components/Font.js","components/Header.js","components/Target.js","components/Main.js","components/Button.js","components/App.js","index.js","assets/wood-texture.svg"],"names":["module","exports","__webpack_require__","p","theme","colors","oak-1","oak-2","oak-3","oak-4","oak-5","red","blue","green","fontFamily","title","head","body","shadow","default","target","button","bar","height","width","backgroundImage","icon","Title","styled","h1","_templateObject","props","Heading3","h2","_templateObject2","_templateObject3","Heading4","h4","_templateObject4","Paragraph","_templateObject5","StyledHeader","header","Header_templateObject","woodTexture","Content","div","Header_templateObject2","solo","Info","Header_templateObject3","Header","_this$props","this","score","time","isStartGame","isGameOver","react_default","a","createElement","Component","StyledTarget","Target_templateObject","color","Target","state","animClass","classNames","spin","className","MainContainer","main","Main_templateObject","MainHeading","span","Main_templateObject2","Rules","Main_templateObject3","DisplayScore","Main_templateObject4","BigAssScore","Main_templateObject5","ButtonColumn","_templateObject6","Icon","_templateObject7","Main","message","handleClick","Fragment","components_Target","onClick","xmlns","viewBox","d","StyledButton","Button_templateObject","Button","moveUp","defaultProps","roundFlag","targetReadyFlag","timeCounter","Layout","App_templateObject","diamondTexture","initialState","toFixed","targetState","App","startGame","_this","setState","prevState","newGame","newRound","Math","random","setTimeout","targetReady","clearTimeout","msTime","setInterval","targetFire","clearInterval","updateScore","_this$state","styled_components_browser_esm","components_Header","components_Main","components_Button","rootElement","document","getElementById","ReactDOM","render","components_App"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,6MCkCzBC,EAlCD,CACZC,OAAQ,CACNC,QAAS,UACTC,QAAS,UACTC,QAAS,UACTC,QAAS,UACTC,QAAS,UACTC,IAAK,UACLC,KAAM,UACNC,MAAO,WAETC,WAAY,CACVC,MAAO,eACPC,KAAM,sBACNC,KAAM,2BAERC,OAAQ,CACJC,QAAS,mCACTC,OAAQ,yCAEZC,OAAQ,CACNC,IAAK,CACHC,OAAQ,OACRC,MAAO,OACPC,gBAAiB,yDAEnBC,KAAM,CACJH,OAAQ,SACRC,MAAO,SACPC,gBAAiB,s2BC3BvB,IAAME,EAAQC,IAAOC,GAAVC,IAKM,SAAAC,GAAK,OAAIA,EAAM3B,MAAMU,WAAZ,QAWpBkB,GAPWJ,IAAOK,GAAVC,IAIG,SAAAH,GAAK,OAAIA,EAAM3B,MAAMU,WAAZ,OAGTc,IAAOK,GAAVE,IAIG,SAAAJ,GAAK,OAAIA,EAAM3B,MAAMU,WAAZ,QAGpBsB,EAAWR,IAAOS,GAAVC,IAIG,SAAAP,GAAK,OAAIA,EAAM3B,MAAMU,WAAZ,OAGpByB,EAAYX,IAAOzB,EAAVqC,IAIE,SAAAT,GAAK,OAAIA,EAAM3B,MAAMU,WAAZ,i1BC9B1B,IAAM2B,EAAeb,IAAOc,OAAVC,IAGF,SAAAZ,GAAK,OAAIA,EAAM3B,MAAMC,OAAO,UAAgBuC,IAC5C,SAAAb,GAAK,OAAIA,EAAM3B,MAAMc,OAAZ,UAKnB2B,EAAUjB,IAAOkB,IAAVC,IAQgB,SAAAhB,GAAK,OAAKA,EAAMiB,KAAO,MAAQ,YAMtDC,EAAOrB,IAAOkB,IAAVI,KAuCKC,mLA1BJ,IAAAC,EAC0CC,KAAKtB,MAA9CuB,EADDF,EACCE,MAAOC,EADRH,EACQG,KAAMC,EADdJ,EACcI,YAAaC,EAD3BL,EAC2BK,WAClC,OACEC,EAAAC,EAAAC,cAACnB,EAAD,KAEEiB,EAAAC,EAAAC,cAACf,EAAD,CAASG,KAAMQ,GAAeC,GAC5BC,EAAAC,EAAAC,cAACjC,EAAD,sBACG6B,GAAeC,IAChBC,EAAAC,EAAAC,cAACX,EAAD,KACES,EAAAC,EAAAC,cAACxB,EAAD,eAAkBkB,GAClBI,EAAAC,EAAAC,cAACxB,EAAD,cAAiBmB,aAXVM,kUCpCrB,IAAMC,EAAelC,IAAOkB,IAAViB,IAIF,SAAAhC,GAAK,OAAIA,EAAM3B,MAAMC,OAAO0B,EAAMiC,QAElC,SAAAjC,GAAK,OAAIA,EAAM3B,MAAMc,OAAZ,SAwCV+C,mLA9BJ,IAOHD,EANIE,EAAUb,KAAKtB,MAAfmC,MAEJC,EAAYC,IAAW,CACzBC,KAAgB,SAAVH,IAIR,OAAQA,GACN,IAAK,OACHF,EAAQ,OACR,MACF,IAAK,QACHA,EAAQ,QACR,MACF,IAAK,OACHA,EAAQ,MACR,MACF,QACEA,EAAQ,QAGZ,OAAON,EAAAC,EAAAC,cAACE,EAAD,CAAcQ,UAAWH,EAAWH,MAAOA,WAvBjCH,s6CCZrB,IAAMU,EAAgB3C,IAAO4C,KAAVC,KAabC,EAAc9C,IAAO+C,KAAVC,KAKXC,EAAQjD,IAAOkB,IAAVgC,KAMLC,EAAenD,IAAOkB,IAAVkC,KAMZC,EAAcrD,IAAO+C,KAAVO,IAGA,SAAAnD,GAAK,OAAIA,EAAM3B,MAAMU,WAAZ,QAGpBqE,EAAevD,IAAOkB,IAAVsC,KAaZC,EAAOzD,IAAOP,OAAViE,IAIM,SAAAvD,GAAK,OAAIA,EAAM3B,MAAMC,OAAO,UAAgBuC,IAC5C,SAAAb,GAAK,OAAIA,EAAM3B,MAAMc,OAAZ,SACf,SAAAa,GAAK,OAAIA,EAAM3B,MAAMC,OAAO,WAoFvBkF,oLA5EJ,IAAAnC,EAQHC,KAAKtB,MANPuB,EAFKF,EAELE,MACAY,EAHKd,EAGLc,MACAV,EAJKJ,EAILI,YACAC,EALKL,EAKLK,WACA+B,EANKpC,EAMLoC,QACAC,EAPKrC,EAOLqC,YAEF,OACE/B,EAAAC,EAAAC,cAACW,EAAD,KACGf,GACCE,EAAAC,EAAAC,cAAAF,EAAAC,EAAA+B,SAAA,KAEEhC,EAAAC,EAAAC,cAACc,EAAD,KACEhB,EAAAC,EAAAC,cAAC5B,EAAD,4BAEF0B,EAAAC,EAAAC,cAACiB,EAAD,KACEnB,EAAAC,EAAAC,cAACrB,EAAD,uGAIAmB,EAAAC,EAAAC,cAACrB,EAAD,mDACAmB,EAAAC,EAAAC,cAACrB,EAAD,yEAGAmB,EAAAC,EAAAC,cAACrB,EAAD,6FAIAmB,EAAAC,EAAAC,cAACrB,EAAD,qEAIHiB,GAAeC,IAAeC,EAAAC,EAAAC,cAAC+B,EAAD,CAAQzB,MAAOA,IAC/CT,GACCC,EAAAC,EAAAC,cAAAF,EAAAC,EAAA+B,SAAA,KAEEhC,EAAAC,EAAAC,cAACc,EAAD,KACEhB,EAAAC,EAAAC,cAAC5B,EAAD,oBAEF0B,EAAAC,EAAAC,cAACmB,EAAD,KACErB,EAAAC,EAAAC,cAACrB,EAAD,KAAYiD,EAAZ,yBACA9B,EAAAC,EAAAC,cAACqB,EAAD,KAAc3B,GACdI,EAAAC,EAAAC,cAACrB,EAAD,mCAEFmB,EAAAC,EAAAC,cAACuB,EAAD,KAEEzB,EAAAC,EAAAC,cAACyB,EAAD,CAAMO,QAASH,GACb/B,EAAAC,EAAAC,cAAA,OACEiC,MAAM,6BACNrE,MAAM,KACND,OAAO,KACPuE,QAAQ,aAERpC,EAAAC,EAAAC,cAAA,QAAMmC,EAAE,oIAGZrC,EAAAC,EAAAC,cAACrB,EAAD,uCA3DKsB,mRC9DnB,IAAMmC,GAAepE,IAAOP,OAAV4E,KAIF,SAAAlE,GAAK,OAAIA,EAAM3B,MAAMC,OAAO,UAAgBuC,IAC5C,SAAAb,GAAK,OAAIA,EAAM3B,MAAMc,OAAZ,SACd,SAAAa,GAAK,OACZA,EAAM3B,MAAMC,OAAO,WAKjB6F,oLACK,IAAA9C,EACsCC,KAAKtB,MAA1CyD,EADDpC,EACCoC,QAAS/B,EADVL,EACUK,WAAYgC,EADtBrC,EACsBqC,YAGzBtB,EAAYC,IAAW,CACzB+B,OAAQ1C,IAGV,OACEC,EAAAC,EAAAC,cAACoC,GAAD,CAAc1B,UAAWH,EAAWyB,QAASH,GAC3C/B,EAAAC,EAAAC,cAACxB,EAAD,KAAWoD,WAXE3B,aAiBrBqC,GAAOE,aAAe,CACpBZ,QAAS,SAQIU,8QCnCf,IAYIG,GACAC,GACAC,GAdEC,GAAS5E,IAAOkB,IAAV2D,KAEI,SAAA1E,GAAK,OAAIA,EAAM3B,MAAMC,OAAO,UAAgBqG,IACjD,SAAA3E,GAAK,OAAIA,EAAM3B,MAAMC,OAAO,WAanCsG,GAAe,CACjBrD,MAAO,EACPC,MAAO,GAAGqD,QAAQ,GAClBC,YAAa,OACbrD,aAAa,EACbC,YAAY,EACZ+B,QAAS,SAkIIsB,8MA9Hb5C,MAAQyC,KAERI,UAAY,WACVC,EAAKC,SAAS,SAAAC,GAAS,OAAIP,QAG7BQ,QAAU,WACRH,EAAKC,SAAS,SAAAC,GAAS,OAAIP,KAC3BK,EAAKI,cAGPA,SAAW,WACTJ,EAAKC,SAAS,SAAAC,GAAS,MAAK,CAC1B3D,MAAO,GAAGqD,QAAQ,GAClBpD,aAAa,EACbC,YAAY,EACZoD,YAAa,OACbrB,QAAS,cAGX,IAAIjC,EAAuB,IAAhB8D,KAAKC,SAChBjB,GAAYkB,WAAWP,EAAKQ,YAAajE,MAG3CiE,YAAc,WACZC,aAAapB,IACbW,EAAKC,SAAS,SAAAC,GAAS,MAAK,CAC1BL,YAAa,QACbrB,QAAS,WAIX,IAAIkC,GAAU,KAAQV,EAAK9C,MAAMZ,MAAQ,IAAIsD,QAAQ,GACrDI,EAAKC,SAAS,SAAAC,GAAS,MAAK,CAC1B3D,MAAOmE,EAAS,KAAMd,QAAQ,MAGhCL,GAAcoB,YAAY,WACxBD,GAAU,GACVV,EAAKC,SAAS,SAAAC,GAAS,MAAK,CAC1B3D,MAAOmE,EAAS,KAAMd,QAAQ,OAE/B,IAEHN,GAAkBiB,WAAWP,EAAKY,WAAYF,MAGhDE,WAAa,WACXH,aAAanB,IACbuB,cAActB,IACdS,EAAKC,SAAS,SAAAC,GAAS,MAAK,CAC1BL,YAAa,OACbpD,YAAY,EACZ+B,QAAS,yCAIbsC,YAAc,WAEZ,OADAD,cAActB,IACNS,EAAK9C,MAAM2C,aACjB,IAAK,OACHY,aAAanB,IACbmB,aAAapB,IACbW,EAAKC,SAAS,SAAAC,GAAS,MAAK,CAC1B1B,QAAS,6BACT/B,YAAY,KAEd,MACF,IAAK,QACHgE,aAAanB,IACbU,EAAKC,SAAS,SAAAC,GAAS,MAAK,CAC1B5D,MAAO4D,EAAU5D,MAAQ,EACzBuD,YAAa,OACbrB,QAAS,gBAGX+B,WAAWP,EAAKI,SAAU,KAC1B,MACF,IAAK,OACL,QACE,OAAO,+EAIJ,IAAAW,EAQH1E,KAAKa,MANPZ,EAFKyE,EAELzE,MACAC,EAHKwE,EAGLxE,KACAsD,EAJKkB,EAILlB,YACArD,EALKuE,EAKLvE,YACAC,EANKsE,EAMLtE,WACA+B,EAPKuC,EAOLvC,QAGF,OACE9B,EAAAC,EAAAC,cAACoE,EAAA,EAAD,CAAe5H,MAAOA,GACpBsD,EAAAC,EAAAC,cAAC4C,GAAD,KACE9C,EAAAC,EAAAC,cAACqE,EAAD,CACE3E,MAAOA,EACPC,KAAMA,EACNC,YAAaA,EACbC,WAAYA,IAEdC,EAAAC,EAAAC,cAACsE,GAAD,CACE5E,MAAOA,EACPY,MAAO2C,EACPrD,YAAaA,EACbC,WAAYA,EACZ+B,QAASA,EACTC,YAAapC,KAAK0D,YAEnBvD,GAAeC,EACdC,EAAAC,EAAAC,cAACuE,GAAD,CACE3C,QAAS,QACT/B,WAAYA,EACZgC,YAAapC,KAAK8D,UAGpBzD,EAAAC,EAAAC,cAACuE,GAAD,CAAQ3C,QAASA,EAASC,YAAapC,KAAKyE,uBAvHtCjE,aC/BZuE,GAAcC,SAASC,eAAe,QAC5CC,IAASC,OAAO9E,EAAAC,EAAAC,cAAC6E,GAAD,MAASL,uBCNzBpI,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.41c4c14e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/diamond-texture.7108dac5.svg\";","const theme = {\r\n  colors: {\r\n    'oak-1': '#332200',\r\n    'oak-2': '#B8800F',\r\n    'oak-3': '#EBB548',\r\n    'oak-4': '#EFCF8F',\r\n    'oak-5': '#F5EBD6',\r\n    red: '#E83138',\r\n    blue: '#297BA3',\r\n    green: '#2CB45A'\r\n  },\r\n  fontFamily: {\r\n    title: \"'Rye', serif\",\r\n    head: \"'Cabin', sans-serif\",\r\n    body: \"'Open Sans', sans-serif\"\r\n  },\r\n  shadow: {\r\n      default: \"0 0.5rem 2rem rgba(0, 0, 0, 0.4)\",\r\n      target: \"0.5rem 0.5rem 2rem rgba(0, 0, 0, 0.4)\"\r\n    },\r\n  button: {\r\n    bar: {\r\n      height: '100%',\r\n      width: '100%',\r\n      backgroundImage: 'linear-gradient(rgba(0, 0, 0, 0), rgba(0, 0, 0, 0.3))'\r\n    },\r\n    icon: {\r\n      height: '6.4rem',\r\n      width: '6.4rem',\r\n      backgroundImage: 'none'\r\n    }\r\n  }\r\n};\r\n\r\nexport default theme;","import styled from 'styled-components';\r\n\r\nconst Title = styled.h1`\r\n  font-size: 4rem;\r\n  line-height: 1.5;\r\n  letter-spacing: 1.6px;\r\n  font-weight: 400;\r\n  font-family: ${props => props.theme.fontFamily['title']};\r\n  text-align: center;\r\n`;\r\n\r\nconst Heading2 = styled.h2`\r\n  font-size: 3.6rem;\r\n  line-height: 1.5;\r\n  letter-spacing: 1.6px;\r\n  font-family: ${props => props.theme.fontFamily['head']};\r\n`;\r\n\r\nconst Heading3 = styled.h2`\r\n  font-size: 3rem;\r\n  line-height: 1.5;\r\n  letter-spacing: 1.6px;\r\n  font-family: ${props => props.theme.fontFamily['head']};\r\n`;\r\n\r\nconst Heading4 = styled.h4`\r\n  line-height: 1.3;\r\n  font-size: 2.4rem;\r\n  letter-spacing: 1.6px;\r\n  font-family: ${props => props.theme.fontFamily['head']};\r\n`;\r\n\r\nconst Paragraph = styled.p`\r\n  margin-bottom: 1rem;\r\n  font-size: 1.6rem;\r\n  line-height: 1.2;\r\n  font-family: ${props => props.theme.fontFamily['body']};\r\n`;\r\n\r\nexport { Title, Heading2, Heading3, Heading4, Paragraph };\r\n","import React, { Component } from 'react';\r\nimport { Title, Heading4 } from './Font';\r\nimport styled from 'styled-components';\r\nimport PropTypes from 'prop-types';\r\nimport woodTexture from '../assets/wood-texture.svg';\r\n\r\nconst StyledHeader = styled.header`\r\n  width: 100%;\r\n  padding: 2rem;\r\n  background: ${props => props.theme.colors['oak-3']} url(${woodTexture});\r\n  box-shadow: ${props => props.theme.shadow['default']};\r\n  display: flex;\r\n  justify-content: center;\r\n`;\r\n\r\nconst Content = styled.div`\r\n  width: max-content;\r\n  display: grid;\r\n  grid-template-columns: auto;\r\n  grid-template-rows: repeat(auto-fit, 1fr);\r\n  align-items: center;\r\n\r\n  @media screen and (min-width: 640px) {\r\n    grid-template-columns: ${props => (props.solo ? '1fr' : '1fr 1fr')};\r\n    grid-column-gap: 8rem;\r\n    grid-template-rows: 1fr;\r\n  }\r\n`;\r\n\r\nconst Info = styled.div`\r\n  justify-self: left;\r\n  margin-left: 1.6rem;\r\n  display: grid;\r\n  grid-template-columns: auto auto;\r\n  grid-column-gap: 2rem;\r\n\r\n  @media screen and (min-width: 640px) {\r\n    margin-left: 0rem;\r\n  }\r\n`;\r\n\r\nclass Header extends Component {\r\n  render() {\r\n    const { score, time, isStartGame, isGameOver } = this.props;\r\n    return (\r\n      <StyledHeader>\r\n        {/* set \"solo = true\" to have Title appear in the center when the Info box is gone during the game */}\r\n        <Content solo={isStartGame || isGameOver}>\r\n          <Title>Quick Draw!</Title>\r\n          {!(isStartGame || isGameOver) && (\r\n            <Info>\r\n              <Heading4>Score: {score}</Heading4>\r\n              <Heading4>Time: {time}</Heading4>\r\n            </Info>\r\n          )}\r\n        </Content>\r\n      </StyledHeader>\r\n    );\r\n  }\r\n}\r\n\r\nHeader.propTypes = {\r\n  score: PropTypes.number,\r\n  time: PropTypes.string, // The toFixed method had been applied, rendering this prop a string\r\n  isStartGame: PropTypes.bool,\r\n  isGameOver: PropTypes.bool\r\n};\r\n\r\nexport default Header;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styled from 'styled-components';\r\nimport classNames from 'classnames';\r\n\r\nconst StyledTarget = styled.div`\r\n  margin: 0 auto;\r\n  height: 16rem;\r\n  width: 16rem;\r\n  background: ${props => props.theme.colors[props.color]};\r\n  transform: rotate(45deg);\r\n  box-shadow: ${props => props.theme.shadow['target']};\r\n  grid-area: target;\r\n\r\n  @media (min-width: 40em) {\r\n    width: 20rem;\r\n    height: 20rem;\r\n  }\r\n`;\r\n\r\nclass Target extends Component {\r\n  render() {\r\n    const { state } = this.props;\r\n\r\n    let animClass = classNames({\r\n      spin: state === 'shot'\r\n    });\r\n\r\n    let color;\r\n    switch (state) {\r\n      case 'idle':\r\n        color = 'blue';\r\n        break;\r\n      case 'ready':\r\n        color = 'green';\r\n        break;\r\n      case 'shot':\r\n        color = 'red';\r\n        break;\r\n      default:\r\n        color = 'oak-3';\r\n    }\r\n\r\n    return <StyledTarget className={animClass} color={color} />;\r\n  }\r\n}\r\n\r\nTarget.propTypes = {\r\n  state: PropTypes.string.isRequired\r\n};\r\n\r\nexport default Target;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styled from 'styled-components';\r\nimport woodTexture from '../assets/wood-texture.svg';\r\n\r\nimport Target from './Target';\r\nimport { Heading3, Paragraph } from './Font';\r\n\r\nconst MainContainer = styled.main`\r\n  max-width: 40rem;\r\n  margin: 0 2rem;\r\n  display: grid;\r\n  grid-template-columns: 5rem auto 5rem;\r\n  grid-template-rows: repeat(3, auto);\r\n  grid-row-gap: 1rem;\r\n  grid-template-areas:\r\n    'heading heading heading'\r\n    '. target .'\r\n    '. buttons .';\r\n`;\r\n\r\nconst MainHeading = styled.span`\r\n  grid-area: heading;\r\n  text-align: center;\r\n`;\r\n\r\nconst Rules = styled.div`\r\n  grid-column: 1 / -1;\r\n  grid-row: 2 / -1;\r\n  text-align: left;\r\n`;\r\n\r\nconst DisplayScore = styled.div`\r\n  grid-column: 1 / -1;\r\n  grid-row: 2 / -2;\r\n  text-align: center;\r\n`;\r\n\r\nconst BigAssScore = styled.span`\r\n  font-size: 6rem;\r\n  line-height: 1.6;\r\n  font-family: ${props => props.theme.fontFamily['title']};\r\n`;\r\n\r\nconst ButtonColumn = styled.div`\r\n  padding: 1rem 0;\r\n  grid-column: 1 / -1;\r\n  display: grid;\r\n  grid-template-columns: max-content 1fr;\r\n  grid-column-gap: 1.6rem;\r\n  align-items: center;\r\n\r\n  @media screen and (min-width: 40rem) {\r\n    grid-area: buttons;\r\n  }\r\n`;\r\n\r\nconst Icon = styled.button`\r\n  border: none;\r\n  width: 6.4rem;\r\n  height: 6.4rem;\r\n  background: ${props => props.theme.colors['oak-3']} url(${woodTexture});\r\n  box-shadow: ${props => props.theme.shadow['default']};\r\n  fill: ${props => props.theme.colors['oak-1']};\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  cursor: pointer;\r\n`;\r\n\r\nclass Main extends Component {\r\n  render() {\r\n    const {\r\n      score,\r\n      state,\r\n      isStartGame,\r\n      isGameOver,\r\n      message,\r\n      handleClick\r\n    } = this.props;\r\n    return (\r\n      <MainContainer>\r\n        {isStartGame && (\r\n          <>\r\n            {/* Only displays before the game */}\r\n            <MainHeading>\r\n              <Heading3>Get ready to draw!</Heading3>\r\n            </MainHeading>\r\n            <Rules>\r\n              <Paragraph>\r\n                Your goal each round is to shoot the target as soon as possible,\r\n                by tapping the bottom button.\r\n              </Paragraph>\r\n              <Paragraph>It will tell you when the target is ready.</Paragraph>\r\n              <Paragraph>\r\n                The timer will count down how long you have to shoot the target.\r\n              </Paragraph>\r\n              <Paragraph>\r\n                You lose when you fail to shoot it before time runs out, or when\r\n                it's not yet ready.\r\n              </Paragraph>\r\n              <Paragraph>When you’re ready, press “START” to play.</Paragraph>\r\n            </Rules>\r\n          </>\r\n        )}\r\n        {!(isStartGame || isGameOver) && <Target state={state} />}\r\n        {isGameOver && (\r\n          <>\r\n            {/* Only displays before the game */}\r\n            <MainHeading>\r\n              <Heading3>Game Over!</Heading3>\r\n            </MainHeading>\r\n            <DisplayScore>\r\n              <Paragraph>{message} Your final tally was</Paragraph>\r\n              <BigAssScore>{score}</BigAssScore>\r\n              <Paragraph>Hit \"START\" to try again!</Paragraph>\r\n            </DisplayScore>\r\n            <ButtonColumn>\r\n              {/* SVG from https://iconmonstr.com/book-2-svg/*/}\r\n              <Icon onClick={handleClick}>\r\n                <svg\r\n                  xmlns=\"http://www.w3.org/2000/svg\"\r\n                  width=\"40\"\r\n                  height=\"40\"\r\n                  viewBox=\"0 0 24 24\"\r\n                >\r\n                  <path d=\"M5.495 2h16.505v-2h-17c-1.657 0-3 1.343-3 3v18c0 1.657 1.343 3 3 3h17v-20h-16.505c-1.375 0-1.375-2 0-2zm.505 4h14v16h-14v-16z\" />\r\n                </svg>\r\n              </Icon>\r\n              <Paragraph>Read the rules again</Paragraph>\r\n            </ButtonColumn>\r\n          </>\r\n        )}\r\n      </MainContainer>\r\n    );\r\n  }\r\n}\r\n\r\nMain.propTypes = {\r\n  score: PropTypes.number,\r\n  state: PropTypes.string,\r\n  isStartGame: PropTypes.bool,\r\n  isGameOver: PropTypes.bool,\r\n  message: PropTypes.string,\r\n  handleClick: PropTypes.func.isRequired\r\n};\r\n\r\nexport default Main;\r\n","import React, { Component } from 'react';\r\nimport styled from 'styled-components';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport woodTexture from '../assets/wood-texture.svg';\r\n\r\nimport { Heading4 } from './Font';\r\n\r\nconst StyledButton = styled.button`\r\n  height: 8rem;\r\n  width: 100%;\r\n  border: none;\r\n  background: ${props => props.theme.colors['oak-3']} url(${woodTexture});\r\n  box-shadow: ${props => props.theme.shadow['default']};\r\n  color: ${props =>\r\n    props.theme.colors['oak-1']}; // Why not applied from Layout?\r\n  text-align: center;\r\n  cursor: pointer;\r\n`;\r\n\r\nclass Button extends Component {\r\n  render() {\r\n    const { message, isGameOver, handleClick } = this.props;\r\n\r\n    // moveUp is currently defined in base.css\r\n    let animClass = classNames({\r\n      moveUp: isGameOver\r\n    });\r\n\r\n    return (\r\n      <StyledButton className={animClass} onClick={handleClick}>\r\n        <Heading4>{message}</Heading4>\r\n      </StyledButton>\r\n    );\r\n  }\r\n}\r\n\r\nButton.defaultProps = {\r\n  message: 'START'\r\n};\r\n\r\nButton.propTypes = {\r\n  message: PropTypes.string,\r\n  handleClick: PropTypes.func.isRequired\r\n};\r\n\r\nexport default Button;\r\n","import React, { Component } from 'react';\r\nimport styled, { ThemeProvider } from 'styled-components';\r\n\r\nimport theme from '../themes/theme';\r\nimport diamondTexture from '../assets/diamond-texture.svg';\r\n\r\nimport Header from './Header';\r\nimport Main from './Main';\r\nimport Button from './Button';\r\n\r\n// Styled Components (must be outside App component)\r\nconst Layout = styled.div`\r\n  height: 100vh;\r\n  background: ${props => props.theme.colors['oak-5']} url(${diamondTexture});\r\n  color: ${props => props.theme.colors['oak-1']};\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  overflow: hidden;\r\n`;\r\n\r\n// Define flags for timeout functions\r\nlet roundFlag;\r\nlet targetReadyFlag;\r\nlet timeCounter;\r\n\r\nlet initialState = {\r\n  score: 0,\r\n  time: (0).toFixed(2), // renders as a string\r\n  targetState: 'idle', // \"idle\", \"ready\", or \"shot\"\r\n  isStartGame: true,\r\n  isGameOver: false,\r\n  message: 'START' // \"START\", \"Ready...\", \"Fire!\", \"Nice shot!\", \"You were shot!\"\r\n};\r\n\r\nclass App extends Component {\r\n  state = initialState;\r\n\r\n  startGame = () => {\r\n    this.setState(prevState => initialState);\r\n  };\r\n\r\n  newGame = () => {\r\n    this.setState(prevState => initialState);\r\n    this.newRound();\r\n  };\r\n\r\n  newRound = () => {\r\n    this.setState(prevState => ({\r\n      time: (0).toFixed(2),\r\n      isStartGame: false,\r\n      isGameOver: false,\r\n      targetState: 'idle',\r\n      message: 'Ready...'\r\n    }));\r\n    // Randomize time between 5 seconds and now\r\n    let time = Math.random() * 5000;\r\n    roundFlag = setTimeout(this.targetReady, time);\r\n  };\r\n\r\n  targetReady = () => {\r\n    clearTimeout(roundFlag);\r\n    this.setState(prevState => ({\r\n      targetState: 'ready',\r\n      message: 'Fire!'\r\n    }));\r\n    // Inverse function\r\n    // The higher the score, the less time you have to shoot\r\n    let msTime = (6000 / (this.state.score + 1)).toFixed(2);\r\n    this.setState(prevState => ({\r\n      time: (msTime / 1000).toFixed(2)\r\n    }));\r\n    // Update state.time with this time every 10 ms while target is 'ready'\r\n    timeCounter = setInterval(() => {\r\n      msTime -= 10;\r\n      this.setState(prevState => ({\r\n        time: (msTime / 1000).toFixed(2)\r\n      }));\r\n    }, 10);\r\n    // Execute 'targetFire' function if no response within 'time'\r\n    targetReadyFlag = setTimeout(this.targetFire, msTime);\r\n  };\r\n\r\n  targetFire = () => {\r\n    clearTimeout(targetReadyFlag);\r\n    clearInterval(timeCounter);\r\n    this.setState(prevState => ({\r\n      targetState: 'idle',\r\n      isGameOver: true,\r\n      message: 'Well shoot, looks like you lost.'\r\n    }));\r\n  };\r\n\r\n  updateScore = () => {\r\n    clearInterval(timeCounter);\r\n    switch (this.state.targetState) {\r\n      case 'idle':\r\n        clearTimeout(targetReadyFlag);\r\n        clearTimeout(roundFlag);\r\n        this.setState(prevState => ({\r\n          message: 'Ya shot too soon, pardner!',\r\n          isGameOver: true\r\n        }));\r\n        break;\r\n      case 'ready':\r\n        clearTimeout(targetReadyFlag);\r\n        this.setState(prevState => ({\r\n          score: prevState.score + 1,\r\n          targetState: 'shot',\r\n          message: 'Nice shot!'\r\n        }));\r\n        // Set new round after 3 seconds\r\n        setTimeout(this.newRound, 3000);\r\n        break;\r\n      case 'shot':\r\n      default:\r\n        return null;\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      score,\r\n      time,\r\n      targetState,\r\n      isStartGame,\r\n      isGameOver,\r\n      message\r\n    } = this.state;\r\n\r\n    return (\r\n      <ThemeProvider theme={theme}>\r\n        <Layout>\r\n          <Header\r\n            score={score}\r\n            time={time}\r\n            isStartGame={isStartGame}\r\n            isGameOver={isGameOver}\r\n          />\r\n          <Main\r\n            score={score}\r\n            state={targetState}\r\n            isStartGame={isStartGame}\r\n            isGameOver={isGameOver}\r\n            message={message}\r\n            handleClick={this.startGame}\r\n          />\r\n          {isStartGame || isGameOver ? (\r\n            <Button\r\n              message={'START'}\r\n              isGameOver={isGameOver}\r\n              handleClick={this.newGame}\r\n            />\r\n          ) : (\r\n            <Button message={message} handleClick={this.updateScore} />\r\n          )}\r\n        </Layout>\r\n      </ThemeProvider>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport App from \"./components/App\";\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nReactDOM.render(<App />, rootElement);\r\n","module.exports = __webpack_public_path__ + \"static/media/wood-texture.90131325.svg\";"],"sourceRoot":""}